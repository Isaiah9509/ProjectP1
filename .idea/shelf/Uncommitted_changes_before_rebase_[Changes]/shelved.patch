Index: app/src/test/java/com/revature/service/ReimbursementServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/test/java/com/revature/service/ReimbursementServiceTest.java b/app/src/test/java/com/revature/service/ReimbursementServiceTest.java
deleted file mode 100644
--- a/app/src/test/java/com/revature/service/ReimbursementServiceTest.java	(revision 25fcffca50884329b8e7252c6aceb424a9d7b694)
+++ /dev/null	(revision 25fcffca50884329b8e7252c6aceb424a9d7b694)
@@ -1,79 +0,0 @@
-package com.revature.service;
-
-import com.revature.models.*;
-import org.junit.Before;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import static org.junit.Assert.assertEquals;
-
-public class ReimbursementServiceTest {
-    @Mock
-    ReimbursementService reimbursementService = new ReimbursementService();
-
-    User employee;
-    User manager;
-    Reimbursement reimbursement;
-
-    @Before
-    public void testObjects(){
-        MockitoAnnotations.openMocks(this);
-        employee = new User(1, "isaiah", "payne", UserRole.EMPLOYEE, "isaiah.payne@email.com","passWord");
-        manager = new User(2, "selamawi", "kahsai", UserRole.MANAGER, "selamawi.kahsai@email.com", "wordPass");
-        reimbursement = new Reimbursement(1, 50, ReimbursementType.FOOD, ReimbursementStatus.PENDING, employee, manager, "Had to buy food during meeting");
-    }
-
-    @Test
-    public void approveReimbursementStatus() {
-
-        reimbursementService.changeReimbursementStatus(1, 2, true);
-
-        assertEquals(ReimbursementStatus.APPROVED, reimbursement.getReimbursementStatus());
-
-
-    }
-
-
-
-
-    @Test
-    public void getAllPendingReimbursementsByAuthor() {
-    }
-
-    @Test
-    public void getAllResolvedReimbursementsByAuthor() {
-    }
-
-    @Test
-    public void getAllPendingReimbursements() {
-    }
-
-    @Test
-    public void getAllResolvedReimbursements() {
-    }
-
-    @Test
-    public void getAllReimbursementsByAuthor() {
-    }
-
-    @Test
-    public void createReimbursement() {
-    }
-
-    @Test
-    public void deleteReimbursement() {
-    }
-
-    @Test
-    public void updateReimbursement() {
-    }
-
-    @Test
-    public void getAllReimbursements() {
-    }
-
-    @Test
-    public void getReimbursementById() {
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/revature/service/ReimbursementService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.revature.service;\r\n\r\nimport com.revature.dao.ReimbursementDao;\r\nimport com.revature.dao.ReimbursementDaoImpl;\r\nimport com.revature.models.Reimbursement;\r\n\r\nimport java.util.List;\r\n\r\npublic class ReimbursementService {\r\n\r\n\r\n    private ReimbursementDao reimbursementDao = new ReimbursementDaoImpl();\r\n\r\n    //Approve or Deny a reimbursement\r\n    public boolean changeReimbursementStatus(int reimb_id, int resolver_id, boolean approve){\r\n        //If the approve boolean is true, it will try to approve the reimbursement.\r\n        if(approve){\r\n            boolean success = reimbursementDao.approveReimbursement(reimb_id, resolver_id);\r\n            //if the approval works, it will return true.\r\n            if(success){\r\n                return true;\r\n            }\r\n            //If the approval doesn't work, ti will return false.\r\n                return false;\r\n            //If the approve boolean is false, it will try to deny the reimbursement.\r\n        } else if (!approve){\r\n            //If the success is true, it will return true.\r\n            boolean success = reimbursementDao.denyReimbursement(reimb_id, resolver_id);\r\n            if(success) {\r\n                return true;\r\n            }\r\n            //Otherwise, it will return false.\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n    }\r\n    //Get all pending reimbursements by Author\r\n    public List<Reimbursement> getAllPendingReimbursementsByAuthor(int author_id){\r\n        return reimbursementDao.getAllPendingReimbursementsByAuthor(author_id);\r\n    }\r\n\r\n    public List<Reimbursement> getAllResolvedReimbursementsByAuthor(int author_id){\r\n        return reimbursementDao.getAllResolvedReimbursementsByAuthor(author_id);\r\n    }\r\n\r\n    //Get all pending reimbursements\r\n    public List<Reimbursement> getAllPendingReimbursements(){\r\n        return reimbursementDao.getAllPendingReimbursements();\r\n    }\r\n\r\n    //Get all resolved reimbursements\r\n    public List<Reimbursement> getAllResolvedReimbursements(){\r\n        return reimbursementDao.getAllResolvedReimbursements();\r\n    }\r\n    //Get reimbursements by ID.\r\n    public List<Reimbursement> getAllReimbursementsByAuthor(int author_id){\r\n        return reimbursementDao.getAllReimbursementsByAuthor(author_id);\r\n    }\r\n\r\n    //Create a Reimbursement\r\n    public boolean createReimbursement(Reimbursement reimbursement){\r\n        return reimbursementDao.createReimbursement(reimbursement);\r\n    }\r\n    //Delete a Reimbursement\r\n    public boolean deleteReimbursement(int id){\r\n        return reimbursementDao.deleteReimbursement(id);\r\n    }\r\n    //Update a Reimbursement\r\n    public boolean updateReimbursement(Reimbursement reimbursement){\r\n        return reimbursementDao.updateReimbursement(reimbursement);\r\n    }\r\n    //Get all reimbursements\r\n    public List<Reimbursement> getAllReimbursements(){\r\n\r\n        return reimbursementDao.getAllReimbursements();\r\n    }\r\n    //Get a reimbursement by ID.\r\n    public Reimbursement getReimbursementById(int id){\r\n        return reimbursementDao.getReimbursementById(id);\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/revature/service/ReimbursementService.java b/app/src/main/java/com/revature/service/ReimbursementService.java
--- a/app/src/main/java/com/revature/service/ReimbursementService.java	(revision 25fcffca50884329b8e7252c6aceb424a9d7b694)
+++ b/app/src/main/java/com/revature/service/ReimbursementService.java	(date 1644612539714)
@@ -62,6 +62,7 @@
     public boolean createReimbursement(Reimbursement reimbursement){
         return reimbursementDao.createReimbursement(reimbursement);
     }
+
     //Delete a Reimbursement
     public boolean deleteReimbursement(int id){
         return reimbursementDao.deleteReimbursement(id);
Index: app/src/main/java/com/revature/service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.revature.service;\r\n\r\nimport com.revature.dao.UserDao;\r\nimport com.revature.dao.UserDaoImpl;\r\nimport com.revature.models.User;\r\n\r\nimport java.util.List;\r\n\r\npublic class UserService {\r\n    private UserDao userDao = new UserDaoImpl();\r\n\r\n\r\n    // ---verifying login\r\n    public boolean verifyLogin(String email, String password){\r\n        User user = userDao.getUserByEmailAndPassword(email, password);\r\n        if(user != null){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    \r\n\r\n\r\n    //----Create a User\r\n    public boolean createUser(User user){\r\n        return userDao.createUser(user);\r\n    }\r\n    //----Delete a User\r\n    public boolean deleteUser(int id){\r\n\r\n        return userDao.deleteUser(id);\r\n    }\r\n    //----Get all users\r\n    public List<User> getAllUsers(){\r\n\r\n        return userDao.getAllUsers();\r\n    }\r\n    //---Get a user by ID.\r\n    public User getUserById(int id){\r\n\r\n        return userDao.getUserById(id);\r\n    }\r\n\r\n    //check if user exists\r\n    //public boolean doesUserExist(User u){\r\n\r\n    //}\r\n\r\n    //----Update user\r\n    public boolean updateUser(User user) {\r\n\r\n        return userDao.updateUser(user);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/revature/service/UserService.java b/app/src/main/java/com/revature/service/UserService.java
--- a/app/src/main/java/com/revature/service/UserService.java	(revision 25fcffca50884329b8e7252c6aceb424a9d7b694)
+++ b/app/src/main/java/com/revature/service/UserService.java	(date 1644608985337)
@@ -11,12 +11,12 @@
 
 
     // ---verifying login
-    public boolean verifyLogin(String email, String password){
+    public User getUserByEmailAndPassword(String email, String password){
         User user = userDao.getUserByEmailAndPassword(email, password);
         if(user != null){
-            return true;
+            return user;
         }
-        return false;
+        return null;
     }
 
     
Index: app/src/main/java/com/revature/dao/UserDaoImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.revature.dao;\r\n\r\nimport com.revature.models.User;\r\nimport com.revature.models.UserRole;\r\nimport com.revature.util.ConUtil;\r\nimport com.revature.util.LoggingUtil;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class UserDaoImpl implements UserDao{\r\n    @Override\r\n    public boolean createUser(User user) {\r\n        LoggingUtil.logger.info(\"Create a user\");\r\n        String sql = \"insert into users (email, password, first_name, last_name, user_role) values (?, ?, ?, ?, ?)\";\r\n        try(Connection c = ConUtil.getConnection();\r\n            PreparedStatement ps = c.prepareStatement(sql);\r\n        ){\r\n            UserRole[] types = UserRole.values();\r\n            ps.setString(1, user.getEmail());\r\n            ps.setString(2, user.getPassword());\r\n            ps.setString(3, user.getF_name());\r\n            ps.setString(4, user.getL_name());\r\n            ps.setInt(5,  user.getUserRole().ordinal());\r\n            int alteredRows = ps.executeUpdate();\r\n            if(alteredRows == 1){\r\n                System.out.println(\"User \" + user.getId() + \" was created\");\r\n                return true;\r\n            }\r\n\r\n\r\n        } catch (SQLException e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean deleteUser(int id) {\r\n        String sql = \"delete from users where id = ?\";\r\n\r\n        try(Connection c = ConUtil.getConnection();\r\n            PreparedStatement ps = c.prepareStatement(sql);\r\n        ){\r\n            ps.setInt(1, id);\r\n            int alteredRows = ps.executeUpdate();\r\n            if(alteredRows == 1){\r\n                System.out.println(\"User \" + id + \" was deleted\");\r\n                return true;\r\n            }\r\n\r\n\r\n        } catch (SQLException e){\r\n            e.printStackTrace();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean updateUser(User user) {\r\n        String sql = \"update users set first_name = ?, last_name = ?, password = ?, email = ?, user_role = ? where id = ?\";\r\n        try(Connection c = ConUtil.getConnection();\r\n            PreparedStatement ps = c.prepareStatement(sql);\r\n        ){\r\n\r\n\r\n            UserRole[] types = UserRole.values();\r\n            ps.setString(1, user.getF_name());\r\n            ps.setString(2, user.getL_name());\r\n            ps.setString(3, user.getPassword());\r\n            ps.setString(4, user.getEmail());\r\n            ps.setInt(5,  user.getUserRole().ordinal());\r\n            ps.setInt(6, user.getId());\r\n\r\n\r\n            int alteredRows = ps.executeUpdate();\r\n            if(alteredRows == 1){\r\n                System.out.println(\"User \" + user.getId() + \" was changed\");\r\n                return true;\r\n            }\r\n\r\n\r\n        } catch (SQLException e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n\r\n\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public List<User> getAllUsers() {\r\n        String sql = \"select * from users\";\r\n\r\n        Connection c = null;\r\n        try {\r\n            c = ConUtil.getConnection();\r\n            Statement s = c.createStatement();\r\n            ResultSet rs = s.executeQuery(sql);\r\n            List<User> userList = new ArrayList<>();\r\n\r\n            while(rs.next()){\r\n            User user = new User();\r\n            int typeOrdinal = rs.getInt(\"user_role\");\r\n            UserRole[] types = UserRole.values();\r\n\r\n            user.setId(rs.getInt(\"id\"));\r\n            user.setUserRole(types[typeOrdinal]);\r\n            user.setEmail(rs.getString(\"email\"));\r\n            user.setF_name(rs.getString(\"first_name\"));\r\n            user.setL_name(rs.getString(\"last_name\"));\r\n            user.setPassword(rs.getString(\"password\"));\r\n            userList.add(user);\r\n            }\r\n            return userList;\r\n\r\n            } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public User getUserById(int id) {\r\n        String sql = \"select * from users where id = ?\";\r\n        try( Connection con =ConUtil.getConnection();\r\n             PreparedStatement ps = con.prepareCall(sql)) {\r\n            ps.setInt(1, id);\r\n            ResultSet rs = ps.executeQuery();\r\n\r\n            if (rs.next()) {\r\n                User user = new User();\r\n                user.setId(rs.getInt(\"id\"));\r\n                user.setEmail(rs.getString(\"email\"));\r\n                user.setPassword(rs.getString(\"password\"));\r\n                user.setF_name(rs.getString(\"first_name\"));\r\n                user.setL_name(rs.getString(\"last_name\"));\r\n                int typeOrdinal = rs.getInt(\"user_role\");\r\n                UserRole[] types = UserRole.values();\r\n                user.setUserRole(types[typeOrdinal]);\r\n                return user;\r\n            }\r\n        } catch( SQLException e){\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n     public User getUserByEmailAndPassword(String email, String password) {\r\n        String sql = \"select * from users where email = ? and password = ?\";\r\n        try( Connection con =ConUtil.getConnection();\r\n        PreparedStatement ps = con.prepareCall(sql)) {\r\n            ps.setString(1,email);\r\n            ps.setString(2,password);\r\n            ResultSet rs = ps.executeQuery();\r\n\r\n            if (rs.next()) {\r\n                System.out.println(\"You are login\");\r\n                User user = new User();\r\n                user.setId(rs.getInt(\"id\"));\r\n                user.setEmail(rs.getString(\"email\"));\r\n                user.setPassword(rs.getString(\"password\"));\r\n                user.setF_name(rs.getString(\"first_name\"));\r\n                user.setL_name(rs.getString(\"last_name\"));\r\n                int typeOrdinal = rs.getInt(\"user_role\");\r\n                UserRole[] types = UserRole.values();\r\n                user.setUserRole(types[typeOrdinal]);\r\n                return user;\r\n            }\r\n        } catch( SQLException e){\r\n           e.printStackTrace();\r\n            }\r\n        return null;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/revature/dao/UserDaoImpl.java b/app/src/main/java/com/revature/dao/UserDaoImpl.java
--- a/app/src/main/java/com/revature/dao/UserDaoImpl.java	(revision 25fcffca50884329b8e7252c6aceb424a9d7b694)
+++ b/app/src/main/java/com/revature/dao/UserDaoImpl.java	(date 1644613287147)
@@ -22,10 +22,10 @@
             ps.setString(2, user.getPassword());
             ps.setString(3, user.getF_name());
             ps.setString(4, user.getL_name());
-            ps.setInt(5,  user.getUserRole().ordinal());
+            ps.setInt(5,  0);
             int alteredRows = ps.executeUpdate();
             if(alteredRows == 1){
-                System.out.println("User " + user.getId() + " was created");
+                System.out.println("User was created");
                 return true;
             }
 
Index: app/src/main/java/com/revature/models/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.revature.models;\r\n\r\npublic class User {\r\n    private Integer id;\r\n    private String f_name;\r\n    private String l_name;\r\n    private UserRole UserRole;\r\n    private String email;\r\n    private String password;\r\n\r\n    public User(String f_name, String l_name, UserRole userRole, String email, String password) {\r\n        this.f_name = f_name;\r\n        this.l_name = l_name;\r\n        UserRole = userRole;\r\n        this.email = email;\r\n        this.password = password;\r\n    }\r\n\r\n    public User(Integer id, String f_name, String l_name, UserRole userRole, String email, String password) {\r\n        this.id = id;\r\n        this.f_name = f_name;\r\n        this.l_name = l_name;\r\n        UserRole = userRole;\r\n        this.email = email;\r\n        this.password = password;\r\n    }\r\n\r\n    public User() {\r\n\r\n    }\r\n\r\n    public UserRole getUserRole() {\r\n        return UserRole;\r\n    }\r\n\r\n    public void setUserRole(UserRole userRole) {\r\n        UserRole = userRole;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Users{\" +\r\n                \"id=\" + id +\r\n                \", f_name='\" + f_name + '\\'' +\r\n                \", l_name='\" + l_name + '\\'' +\r\n                \", User_Role=\" + UserRole +\r\n                \", email='\" + email + '\\'' +\r\n                \", password='\" + password + '\\'' +\r\n                '}';\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(Integer id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getF_name() {\r\n        return f_name;\r\n    }\r\n\r\n    public void setF_name(String f_name) {\r\n        this.f_name = f_name;\r\n    }\r\n\r\n    public String getL_name() {\r\n        return l_name;\r\n    }\r\n\r\n    public void setL_name(String l_name) {\r\n        this.l_name = l_name;\r\n    }\r\n\r\n\r\n    public String getEmail() {\r\n        return email;\r\n    }\r\n\r\n    public void setEmail(String email) {\r\n        this.email = email;\r\n    }\r\n\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/revature/models/User.java b/app/src/main/java/com/revature/models/User.java
--- a/app/src/main/java/com/revature/models/User.java	(revision 25fcffca50884329b8e7252c6aceb424a9d7b694)
+++ b/app/src/main/java/com/revature/models/User.java	(date 1644612989827)
@@ -29,6 +29,13 @@
 
     }
 
+    public User(String email, String password, String firstName, String lastName) {
+        this.email = email;
+        this.password = password;
+        this.f_name = firstName;
+        this.l_name = lastName;
+    }
+
     public UserRole getUserRole() {
         return UserRole;
     }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"e8ff5612-a4de-4135-b16c-977898bc8acc\" name=\"Changes\" comment=\"&quot;shifted stuff around on my branch&quot;\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2_8_2022_6_02_PM__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2_8_2022_6_02_PM__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2_8_2022_6_02_PM__Changes_1.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2_8_2022_6_02_PM__Changes_1.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2_9_2022_7_07_PM__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2_9_2022_7_07_PM__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/index.pb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/index.pb\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/revature/ReimbursementDriver.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/revature/ReimbursementDriver.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/revature/util/LoggingUtil.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/revature/util/LoggingUtil.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"CodeInsightWorkspaceSettings\">\r\n    <option name=\"optimizeImportsOnTheFly\" value=\"true\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$/../../Project0/project0-template\">\r\n      <ProjectState />\r\n    </projectState>\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <task path=\"$PROJECT_DIR$\">\r\n          <activation />\r\n        </task>\r\n        <projects_view />\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Enum\" />\r\n        <option value=\"Interface\" />\r\n        <option value=\"JUnit3 Test Class\" />\r\n        <option value=\"JUnit4 Test Class\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"24ehqdIV2U4wZH2NBrbtUr3uE6R\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"1\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary\" value=\"JUnit4\" />\r\n    <property name=\"com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit3\" value=\"junit.framework.TestCase\" />\r\n    <property name=\"com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit4\" value=\"\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"project.structure.last.edited\" value=\"Modules\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.0\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.0\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"preferences.pluginManager\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CreateTestDialog.Recents.Supers\">\r\n      <recent name=\"\" />\r\n      <recent name=\"junit.framework.TestCase\" />\r\n    </key>\r\n    <key name=\"CreateTestDialog.RecentsKey\">\r\n      <recent name=\"com.revature.service\" />\r\n      <recent name=\"com.revature.models\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.ReimbursementDriver\">\r\n    <configuration name=\"ReimbursementDriver\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.revature.ReimbursementDriver\" />\r\n      <module name=\"newProject01.app.main\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.revature.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"ReimbursementServiceTest\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" value=\"\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\":app:test\" />\r\n            <option value=\"--tests\" />\r\n            <option value=\"&quot;com.revature.service.ReimbursementServiceTest&quot;\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"ReimbursementServiceTest.approveReimbursementStatus\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" value=\"\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\":app:test\" />\r\n            <option value=\"--tests\" />\r\n            <option value=\"&quot;com.revature.service.ReimbursementServiceTest.approveReimbursementStatus&quot;\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"UserTest\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" value=\"\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\":app:test\" />\r\n            <option value=\"--tests\" />\r\n            <option value=\"&quot;com.revature.models.UserTest&quot;\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"UserTest.getUserRole\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" value=\"\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\":app:test\" />\r\n            <option value=\"--tests\" />\r\n            <option value=\"&quot;com.revature.models.UserTest.getUserRole&quot;\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.ReimbursementDriver\" />\r\n        <item itemvalue=\"Gradle.ReimbursementServiceTest.approveReimbursementStatus\" />\r\n        <item itemvalue=\"Gradle.ReimbursementServiceTest\" />\r\n        <item itemvalue=\"Gradle.UserTest.getUserRole\" />\r\n        <item itemvalue=\"Gradle.UserTest\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"e8ff5612-a4de-4135-b16c-977898bc8acc\" name=\"Changes\" comment=\"&quot;shifted stuff around on my branch&quot;\" />\r\n      <created>1643997151958</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1643997151958</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <ignored-roots>\r\n      <path value=\"$PROJECT_DIR$/../../Project0/project0-template\" />\r\n    </ignored-roots>\r\n    <MESSAGE value=\"&quot;shifted stuff around on my branch&quot;\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"&quot;shifted stuff around on my branch&quot;\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/app/build.gradle</url>\r\n          <line>16</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 25fcffca50884329b8e7252c6aceb424a9d7b694)
+++ b/.idea/workspace.xml	(date 1644612989968)
@@ -4,14 +4,24 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="e8ff5612-a4de-4135-b16c-977898bc8acc" name="Changes" comment="&quot;shifted stuff around on my branch&quot;">
+    <list default="true" id="e8ff5612-a4de-4135-b16c-977898bc8acc" name="Changes" comment="Push random changes">
       <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2_8_2022_6_02_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2_8_2022_6_02_PM__Changes_.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2_8_2022_6_02_PM__Changes_1.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2_8_2022_6_02_PM__Changes_1.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2_9_2022_7_07_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2_9_2022_7_07_PM__Changes_.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/sonarlint/issuestore/index.pb" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/sonarlint/issuestore/index.pb" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/revature/JavalinApp.java" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/revature/JavalinApp.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/src/main/java/com/revature/ReimbursementDriver.java" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/revature/ReimbursementDriver.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/revature/util/LoggingUtil.java" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/revature/util/LoggingUtil.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/revature/controllers/AuthController.java" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/revature/controllers/AuthController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/revature/controllers/ReimbursementController.java" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/revature/controllers/ReimbursementController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/revature/controllers/UserController.java" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/revature/controllers/UserController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/revature/dao/UserDaoImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/revature/dao/UserDaoImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/revature/models/Reimbursement.java" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/revature/models/Reimbursement.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/revature/models/User.java" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/revature/models/User.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/revature/service/ReimbursementService.java" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/revature/service/ReimbursementService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/revature/service/UserService.java" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/revature/service/UserService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/test/java/com/revature/service/ReimbursementServiceTest.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/test/java/com/revature/service/UserServiceTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/test/java/com/revature/service/UserServiceTest.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -45,8 +55,9 @@
         <option value="Enum" />
         <option value="Interface" />
         <option value="JUnit3 Test Class" />
-        <option value="JUnit4 Test Class" />
         <option value="Class" />
+        <option value="JUnit4 Test Class" />
+        <option value="JUnit5 Test Class" />
       </list>
     </option>
   </component>
@@ -76,9 +87,10 @@
     <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
     <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
-    <property name="com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary" value="JUnit4" />
+    <property name="com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary" value="JUnit5" />
     <property name="com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit3" value="junit.framework.TestCase" />
     <property name="com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit4" value="" />
+    <property name="com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5" value="" />
     <property name="last_opened_file_path" value="$PROJECT_DIR$" />
     <property name="project.structure.last.edited" value="Modules" />
     <property name="project.structure.proportion" value="0.0" />
@@ -155,7 +167,7 @@
       <DebugAllEnabled>false</DebugAllEnabled>
       <method v="2" />
     </configuration>
-    <configuration name="UserTest" type="GradleRunConfiguration" factoryName="Gradle" temporary="true">
+    <configuration name="UserServiceTest" type="GradleRunConfiguration" factoryName="Gradle" temporary="true">
       <ExternalSystemSettings>
         <option name="executionName" />
         <option name="externalProjectPath" value="$PROJECT_DIR$" />
@@ -168,7 +180,7 @@
           <list>
             <option value=":app:test" />
             <option value="--tests" />
-            <option value="&quot;com.revature.models.UserTest&quot;" />
+            <option value="&quot;com.revature.service.UserServiceTest&quot;" />
           </list>
         </option>
         <option name="vmOptions" />
@@ -203,11 +215,11 @@
     </configuration>
     <recent_temporary>
       <list>
+        <item itemvalue="Gradle.ReimbursementServiceTest" />
+        <item itemvalue="Gradle.ReimbursementServiceTest.approveReimbursementStatus" />
+        <item itemvalue="Gradle.UserServiceTest" />
         <item itemvalue="Application.ReimbursementDriver" />
-        <item itemvalue="Gradle.ReimbursementServiceTest.approveReimbursementStatus" />
-        <item itemvalue="Gradle.ReimbursementServiceTest" />
         <item itemvalue="Gradle.UserTest.getUserRole" />
-        <item itemvalue="Gradle.UserTest" />
       </list>
     </recent_temporary>
   </component>
@@ -240,15 +252,4 @@
     <MESSAGE value="&quot;shifted stuff around on my branch&quot;" />
     <option name="LAST_COMMIT_MESSAGE" value="&quot;shifted stuff around on my branch&quot;" />
   </component>
-  <component name="XDebuggerManager">
-    <breakpoint-manager>
-      <breakpoints>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/app/build.gradle</url>
-          <line>16</line>
-          <option name="timeStamp" value="1" />
-        </line-breakpoint>
-      </breakpoints>
-    </breakpoint-manager>
-  </component>
 </project>
\ No newline at end of file
Index: .idea/sonarlint/issuestore/index.pb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\nn\n>app/src/main/java/com/revature/models/ReimbursementStatus.java\u0012,c\\3\\c30fddb0439f58ca7b412c2eda9ea7d84858f8d8\n_\n/app/src/main/java/com/revature/dao/UserDao.java\u0012,2\\c\\2c56241303a0b05da34118718b96f439ea0cb100\nt\nDapp/src/test/java/com/revature/service/ReimbursementServiceTest.java\u0012,b\\3\\b3743f9e3693e9b15c3e59440294f278c62ee5a4\n?\n\u000Fsettings.gradle\u0012,0\\5\\05efc8b1657769a27696d478ded1e95f38737233\nn\n>app/src/main/java/com/revature/controllers/UserController.java\u0012,c\\8\\c8efb88e44ba24395badea17949be5e5b7cd6cad\ng\n7app/src/main/java/com/revature/ReimbursementDriver.java\u0012,4\\f\\4f399127fd32197e76b6b66b209ab9de06a7dfe3
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/sonarlint/issuestore/index.pb b/.idea/sonarlint/issuestore/index.pb
--- a/.idea/sonarlint/issuestore/index.pb	(revision 25fcffca50884329b8e7252c6aceb424a9d7b694)
+++ b/.idea/sonarlint/issuestore/index.pb	(date 1644614127776)
@@ -1,13 +1,5 @@
 
-n
->app/src/main/java/com/revature/models/ReimbursementStatus.java,c\3\c30fddb0439f58ca7b412c2eda9ea7d84858f8d8
 _
 /app/src/main/java/com/revature/dao/UserDao.java,2\c\2c56241303a0b05da34118718b96f439ea0cb100
-t
-Dapp/src/test/java/com/revature/service/ReimbursementServiceTest.java,b\3\b3743f9e3693e9b15c3e59440294f278c62ee5a4
 ?
-settings.gradle,0\5\05efc8b1657769a27696d478ded1e95f38737233
-n
->app/src/main/java/com/revature/controllers/UserController.java,c\8\c8efb88e44ba24395badea17949be5e5b7cd6cad
-g
-7app/src/main/java/com/revature/ReimbursementDriver.java,4\f\4f399127fd32197e76b6b66b209ab9de06a7dfe3
\ No newline at end of file
+settings.gradle,0\5\05efc8b1657769a27696d478ded1e95f38737233
\ No newline at end of file
Index: app/src/main/java/com/revature/ReimbursementDriver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.revature;\r\n\r\nimport org.apache.log4j.BasicConfigurator;\r\n\r\npublic class ReimbursementDriver {\r\n    public static void main(String[] args) {\r\n        BasicConfigurator.configure();\r\n        JavalinApp app = new JavalinApp();\r\n        app.start(8070);\r\n    /*    try {\r\n            Connection connection = ConUtil.getConnection();\r\n            System.out.println(\"Congratulation.You have Connected successfully to  database\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }*/\r\n\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/revature/ReimbursementDriver.java b/app/src/main/java/com/revature/ReimbursementDriver.java
--- a/app/src/main/java/com/revature/ReimbursementDriver.java	(revision 25fcffca50884329b8e7252c6aceb424a9d7b694)
+++ b/app/src/main/java/com/revature/ReimbursementDriver.java	(date 1644600827927)
@@ -7,12 +7,6 @@
         BasicConfigurator.configure();
         JavalinApp app = new JavalinApp();
         app.start(8070);
-    /*    try {
-            Connection connection = ConUtil.getConnection();
-            System.out.println("Congratulation.You have Connected successfully to  database");
-        } catch (Exception e) {
-            e.printStackTrace();
-        }*/
 
     }
 
Index: app/src/test/java/com/revature/service/UserServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.revature.service;\r\n\r\nimport com.revature.models.User;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nclass UserServiceTest {\r\nprivate  UserService underTest;\r\n\r\n    @Test\r\n    void itShouldCheckIfUserExistById() {\r\n        // given\r\n        User user =new User(\r\n                id :1;\r\n        );\r\n        // when\r\n        //then\r\n\r\n\r\n    }\r\n\r\n    @Test\r\n    void verifyLogin() {\r\n    }\r\n\r\n    @Test\r\n    void createUser() {\r\n    }\r\n\r\n    @Test\r\n    void deleteUser() {\r\n    }\r\n\r\n    @Test\r\n    void getAllUsers() {\r\n    }\r\n\r\n\r\n\r\n    @Test\r\n    void updateUser() {\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/test/java/com/revature/service/UserServiceTest.java b/app/src/test/java/com/revature/service/UserServiceTest.java
--- a/app/src/test/java/com/revature/service/UserServiceTest.java	(revision 25fcffca50884329b8e7252c6aceb424a9d7b694)
+++ b/app/src/test/java/com/revature/service/UserServiceTest.java	(date 1644602260484)
@@ -1,20 +1,11 @@
 package com.revature.service;
 
-import com.revature.models.User;
 import org.junit.jupiter.api.Test;
 
 class UserServiceTest {
-private  UserService underTest;
 
     @Test
     void itShouldCheckIfUserExistById() {
-        // given
-        User user =new User(
-                id :1;
-        );
-        // when
-        //then
-
 
     }
 
Index: app/src/main/java/com/revature/controllers/ReimbursementController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.revature.controllers;\r\n\r\nimport com.revature.models.Reimbursement;\r\nimport com.revature.models.User;\r\nimport com.revature.service.ReimbursementService;\r\nimport io.javalin.http.Context;\r\n\r\nimport java.util.List;\r\n\r\nimport static java.lang.Integer.parseInt;\r\n\r\npublic class ReimbursementController {\r\n    private ReimbursementService reimbursementService = new ReimbursementService();\r\n\r\n    public void handleGetAllReimbursements(Context ctx){\r\n        List<Reimbursement> reimbursementList = reimbursementService.getAllReimbursements();\r\n        System.out.println(reimbursementList);\r\n       if(reimbursementList.isEmpty()){\r\n           ctx.status(400);\r\n           ctx.result(\"There are no reimbursements\");\r\n       } else{\r\n           ctx.status(200);\r\n           ctx.json(reimbursementList);\r\n       }\r\n    }\r\n    public void handleGetReimbursementsById(Context ctx){\r\n        int id = Integer.parseInt(ctx.pathParam(\"id\"));\r\n        Reimbursement reimbursement = reimbursementService.getReimbursementById(id);\r\n        if(reimbursement==null){\r\n            ctx.status(400);\r\n            ctx.result(\"Reimbursement does not exist\");\r\n        }else{\r\n            ctx.status(200);\r\n            ctx.json(reimbursement);\r\n        }\r\n    }\r\n\r\n    public void handleDenyReimbursement(Context ctx){\r\n        int id = parseInt(ctx.pathParam(\"id\"));\r\n        User user = ctx.bodyAsClass(User.class);\r\n\r\n        if(reimbursementService.changeReimbursementStatus(id,user.getId(),false)){\r\n            ctx.status(200);\r\n            ctx.result(\"You successfully denied the reimbursement\");\r\n        }else{\r\n            ctx.status(400);\r\n            ctx.result(\"Reimbursement doesn't exist\");\r\n        }\r\n    }\r\n\r\n    public void handleApproveReimbursement(Context ctx){\r\n        int id = parseInt(ctx.pathParam(\"id\"));\r\n        User user = ctx.bodyAsClass(User.class);\r\n\r\n        if(reimbursementService.changeReimbursementStatus(id,user.getId(),true)){\r\n            ctx.status(200);\r\n            ctx.result(\"You successfully approved the reimbursement\");\r\n        }else{\r\n            ctx.status(400);\r\n            ctx.result(\"Reimbursement doesn't exist\");\r\n        }\r\n    }\r\n\r\n    public void handleGetReimbursementsByAuthor(Context ctx){\r\n        int id = parseInt(ctx.pathParam(\"id\"));\r\n        List<Reimbursement> reimbursement= reimbursementService.getAllReimbursementsByAuthor(id);\r\n        if(reimbursement.isEmpty()){\r\n            ctx.status(403);\r\n            ctx.result(\"There are no reimbursements for this author\");\r\n        }else{\r\n            ctx.status(200);\r\n            ctx.json(reimbursement);\r\n        }\r\n    }\r\n    public void handleGetAllReimbursementPending(Context ctx){\r\n        List<Reimbursement> reimbursementPending =reimbursementService.getAllPendingReimbursements();\r\n        System.out.println(reimbursementPending);\r\n        if(reimbursementPending.isEmpty()){\r\n            ctx.result(\"There are no pending reimbursements\");\r\n        }\r\n        else{\r\n            ctx.status(200);\r\n            ctx.json(reimbursementPending);\r\n        }\r\n    }\r\n\r\n    public void handleGetAllResolvedReimbursement(Context ctx){\r\n        List<Reimbursement> reimbursementResolve =reimbursementService.getAllResolvedReimbursements();\r\n        if(reimbursementResolve.isEmpty()){\r\n            ctx.result(\"There are no resolved reimbursements\");\r\n        }\r\n        else{\r\n            ctx.status(200);\r\n            ctx.json(reimbursementResolve);\r\n        }\r\n    }\r\n    public void handleGetAllPendingByUserID(Context ctx){\r\n        int id = Integer.parseInt(ctx.pathParam(\"id\"));\r\n        List<Reimbursement> pendingReimbursemetsByUsers =reimbursementService.getAllPendingReimbursementsByAuthor(id);\r\n        System.out.println(id);\r\n        if(pendingReimbursemetsByUsers.isEmpty()){\r\n            ctx.result(\"There are no pending reimbursement\");\r\n        }\r\n        else{\r\n            ctx.status(200);\r\n            ctx.json(pendingReimbursemetsByUsers);\r\n        }\r\n    }\r\n    // ---\r\n     public void  handleGetResolvedByUserID (Context ctx){\r\n    int id = Integer.parseInt(ctx.pathParam(\"id\"));\r\n    List<Reimbursement> resolvedReimbursemetsByUsers =reimbursementService.getAllResolvedReimbursementsByAuthor(id);\r\n      if(resolvedReimbursemetsByUsers.isEmpty()){\r\n          ctx.result(\"there are no any resolved reimbursement yet\");\r\n      }\r\n      else{\r\n          ctx.status(200);\r\n          ctx.json(resolvedReimbursemetsByUsers);}\r\n}\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/revature/controllers/ReimbursementController.java b/app/src/main/java/com/revature/controllers/ReimbursementController.java
--- a/app/src/main/java/com/revature/controllers/ReimbursementController.java	(revision 25fcffca50884329b8e7252c6aceb424a9d7b694)
+++ b/app/src/main/java/com/revature/controllers/ReimbursementController.java	(date 1644612312838)
@@ -1,8 +1,10 @@
 package com.revature.controllers;
 
 import com.revature.models.Reimbursement;
+import com.revature.models.ReimbursementType;
 import com.revature.models.User;
 import com.revature.service.ReimbursementService;
+import com.revature.util.LoggingUtil;
 import io.javalin.http.Context;
 
 import java.util.List;
@@ -12,6 +14,25 @@
 public class ReimbursementController {
     private ReimbursementService reimbursementService = new ReimbursementService();
 
+    public void handleCreateReimbursement(Context ctx){
+        LoggingUtil.logger.info("Attempting to create a reimbursement");
+        double amount = Double.parseDouble(ctx.formParam("Amount"));
+        int author_id = Integer.parseInt(ctx.pathParam("id"));
+        ReimbursementType reimbursementType = ReimbursementType.valueOf(ctx.formParam("ReimbursementType"));
+
+        Reimbursement reimbursement = new Reimbursement(amount, author_id, reimbursementType);
+        if(reimbursementService.createReimbursement(reimbursement)){
+            LoggingUtil.logger.info("User id:" + author_id + " created a reimbursement");
+            ctx.result("Successfully created a reimbursement under ID: " + author_id);
+            ctx.status(200);
+        } else {
+            LoggingUtil.logger.warn("User id:" + author_id + " could not create a reimbursement.");
+            ctx.status(403);
+            ctx.result("Could not create a reimbursement.");
+        }
+    }
+
+
     public void handleGetAllReimbursements(Context ctx){
         List<Reimbursement> reimbursementList = reimbursementService.getAllReimbursements();
         System.out.println(reimbursementList);
Index: app/src/main/java/com/revature/controllers/AuthController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.revature.controllers;\r\n\r\npublic class AuthController {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/revature/controllers/AuthController.java b/app/src/main/java/com/revature/controllers/AuthController.java
--- a/app/src/main/java/com/revature/controllers/AuthController.java	(revision 25fcffca50884329b8e7252c6aceb424a9d7b694)
+++ b/app/src/main/java/com/revature/controllers/AuthController.java	(date 1644611715452)
@@ -1,4 +1,65 @@
 package com.revature.controllers;
 
+import com.revature.models.User;
+import com.revature.service.ReimbursementService;
+import com.revature.service.UserService;
+import com.revature.util.LoggingUtil;
+import io.javalin.http.Context;
+import io.javalin.http.UnauthorizedResponse;
+
 public class AuthController {
+    private UserService userService = new UserService();
+    private ReimbursementService reimbursementService = new ReimbursementService();
+
+
+    public void handleLogin(Context ctx){
+        LoggingUtil.logger.info("Attempting to login");
+        String email = ctx.formParam("email");
+        String password = ctx.formParam("password");
+
+        User user = userService.getUserByEmailAndPassword(email, password);
+        if(user==null){
+            throw new UnauthorizedResponse("Incorrect username and password");
+        }
+        LoggingUtil.logger.info("User " + user.getEmail() + " has logged in");
+        ctx.result("Logged in");
+        String authKey = String.valueOf(user.getUserRole());
+        String userToken = user.getF_name() + "^_^" + user.getL_name();
+
+        ctx.header("Authorization", authKey);
+        ctx.header("User-Token", userToken);
+    }
+
+    public void authorizeEmployeeToken(Context ctx){
+        LoggingUtil.logger.info("Verifying employee is logged in");
+
+        if(ctx.header("Authorization")!= null){
+            if(ctx.header("Authorization").equals("EMPLOYEE")) {
+                LoggingUtil.logger.info("User has Employee authorization");
+                ctx.status(200);
+            } else {
+                throw new UnauthorizedResponse("You need to be an employee to use this feature");
+            }
+        } else {
+            throw new UnauthorizedResponse("You need to login to use this feature");
+        }
+
+    }
+
+    public void authorizeManagerToken(Context ctx){
+        LoggingUtil.logger.info("Verifying manager is logged in");
+
+        if(ctx.header("Authorization")!= null){
+            if(ctx.header("Authorization").equals("MANAGER")) {
+                LoggingUtil.logger.info("User has Manager authorization");
+                ctx.status(200);
+            } else {
+                throw new UnauthorizedResponse("You need to be a manager to use this feature");
+            }
+        } else {
+            throw new UnauthorizedResponse("You need to login to use this feature");
+        }
+
+    }
+
 }
Index: app/src/main/java/com/revature/JavalinApp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.revature;\r\n\r\nimport com.revature.controllers.ReimbursementController;\r\nimport com.revature.controllers.UserController;\r\nimport io.javalin.Javalin;\r\n\r\nimport static io.javalin.apibuilder.ApiBuilder.*;\r\n\r\n\r\npublic class JavalinApp {\r\n    private UserController userController = new UserController();\r\n    private ReimbursementController reimbursementController = new ReimbursementController();\r\n\r\n    private Javalin app = Javalin.create().routes(() -> {\r\n        path(\"/users\", () -> {\r\n            get(userController::handleGetAllUsers);\r\n            path(\"/{id}\", () -> {\r\n                get(userController::handleGetUserById);\r\n                put(userController::handleUpdateUserById);\r\n                path(\"/reimbursements\", () -> {\r\n                    get(reimbursementController::handleGetReimbursementsByAuthor);\r\n                    path(\"/pending\", () ->{\r\n                        get(reimbursementController::handleGetAllPendingByUserID);\r\n                    });\r\n                    path(\"/resolved\", () ->{\r\n                        get(reimbursementController::handleGetResolvedByUserID );\r\n                    });\r\n                });\r\n            });});\r\n        path(\"/reimbursements\", () -> {\r\n            get(reimbursementController::handleGetAllReimbursements);\r\n            path(\"/pending\", () -> {\r\n                get(reimbursementController::handleGetAllReimbursementPending);\r\n            });\r\n            path(\"/resolved\", () -> {\r\n                get(reimbursementController::handleGetAllResolvedReimbursement);\r\n            });\r\n\r\n            path(\"/{id}\", () -> {\r\n                get(reimbursementController::handleGetReimbursementsById);\r\n                path(\"/approve\", () -> {\r\n                    put(reimbursementController::handleApproveReimbursement);\r\n                });\r\n                path(\"/deny\", () -> {\r\n                    put(reimbursementController::handleDenyReimbursement);\r\n                });\r\n            });\r\n\r\n        });\r\n    });\r\n\r\n    public void start(int port){\r\n        app.start(port);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/revature/JavalinApp.java b/app/src/main/java/com/revature/JavalinApp.java
--- a/app/src/main/java/com/revature/JavalinApp.java	(revision 25fcffca50884329b8e7252c6aceb424a9d7b694)
+++ b/app/src/main/java/com/revature/JavalinApp.java	(date 1644613114851)
@@ -1,5 +1,6 @@
 package com.revature;
 
+import com.revature.controllers.AuthController;
 import com.revature.controllers.ReimbursementController;
 import com.revature.controllers.UserController;
 import io.javalin.Javalin;
@@ -10,8 +11,15 @@
 public class JavalinApp {
     private UserController userController = new UserController();
     private ReimbursementController reimbursementController = new ReimbursementController();
+    private AuthController authController = new AuthController();
 
     private Javalin app = Javalin.create().routes(() -> {
+        path("/login", () -> {
+           post(authController::handleLogin);
+        });
+        path("/register", () -> {
+            post(userController::handleRegisterUser);
+        });
         path("/users", () -> {
             get(userController::handleGetAllUsers);
             path("/{id}", () -> {
@@ -25,8 +33,12 @@
                     path("/resolved", () ->{
                         get(reimbursementController::handleGetResolvedByUserID );
                     });
+                    path("/create", () ->{
+                        get(reimbursementController::handleCreateReimbursement);
+                    });
                 });
-            });});
+            });
+        });
         path("/reimbursements", () -> {
             get(reimbursementController::handleGetAllReimbursements);
             path("/pending", () -> {
@@ -35,7 +47,6 @@
             path("/resolved", () -> {
                 get(reimbursementController::handleGetAllResolvedReimbursement);
             });
-
             path("/{id}", () -> {
                 get(reimbursementController::handleGetReimbursementsById);
                 path("/approve", () -> {
@@ -45,8 +56,22 @@
                     put(reimbursementController::handleDenyReimbursement);
                 });
             });
-
         });
+        //Reimbursements authorization for Managers.
+        before("/reimbursements", authController::authorizeManagerToken);
+        before("/reimbursements/{id}", authController::authorizeManagerToken);
+        before("/reimbursements/pending", authController::authorizeManagerToken);
+        before("/reimbursements/resolved", authController::authorizeManagerToken);
+        before("/reimbursements/{id}/approve", authController::authorizeManagerToken);
+        before("/reimbursements/{id}/deny", authController::authorizeManagerToken);
+        //Users authorization for Users and Managers
+        before("/users", authController::authorizeManagerToken);
+        before("/users/{id}", authController::authorizeEmployeeToken);
+        before("/users/{id}/reimbursements", authController::authorizeEmployeeToken);
+        before("/users/{id}/reimbursements/pending", authController::authorizeEmployeeToken);
+        before("/users/{id}/reimbursements/resolved", authController::authorizeEmployeeToken);
+        before("/users/{id}/reimbursements/create", authController::authorizeEmployeeToken);
+
     });
 
     public void start(int port){
Index: app/src/main/java/com/revature/controllers/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.revature.controllers;\r\n\r\nimport com.revature.models.User;\r\nimport com.revature.service.UserService;\r\nimport io.javalin.http.Context;\r\n\r\nimport java.util.List;\r\n\r\nimport static java.lang.Integer.parseInt;\r\n\r\npublic class UserController {\r\n    private UserService userService = new UserService();\r\n\r\n    public void handleGetAllUsers(Context ctx){\r\n        List<User> userList = userService.getAllUsers();\r\n        if(userList.isEmpty()){\r\n            ctx.status(403);\r\n            ctx.result(\"There are no users\");\r\n        }\r\n        ctx.json(userList);\r\n    }\r\n\r\n\r\n    public void handleGetUserById(Context ctx){\r\n        User u = userService.getUserById(parseInt(ctx.pathParam(\"id\")));\r\n        System.out.println(u);\r\n        if(u==null){\r\n            ctx.result(\"Id entered does not exist in the database\");\r\n            ctx.status(400);\r\n        }else{\r\n           ctx.status(203);\r\n           ctx.json(u);\r\n        }\r\n    }\r\n\r\n\r\n    public void handleUpdateUserById(Context ctx){\r\n        int id = Integer.parseInt(ctx.pathParam(\"id\"));\r\n        User u = ctx.bodyAsClass(User.class);\r\n        u.setId(id);\r\n\r\n        if(u==null){\r\n            ctx.status(400);\r\n            ctx.result(\"Id doesn't exist in database\");\r\n        } else{\r\n            ctx.status(200);\r\n            ctx.result(\"You have updated user\" + userService.updateUser(u));\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/revature/controllers/UserController.java b/app/src/main/java/com/revature/controllers/UserController.java
--- a/app/src/main/java/com/revature/controllers/UserController.java	(revision 25fcffca50884329b8e7252c6aceb424a9d7b694)
+++ b/app/src/main/java/com/revature/controllers/UserController.java	(date 1644613045366)
@@ -20,6 +20,22 @@
         ctx.json(userList);
     }
 
+    public void handleRegisterUser(Context ctx){
+        String email = ctx.formParam("email");
+        String password = ctx.formParam("password");
+        String firstName = ctx.formParam("firstName");
+        String lastName = ctx.formParam("lastName");
+
+        User user = new User(email, password, firstName, lastName);
+        if(userService.createUser(user)){
+            ctx.result("Your account has been created");
+            ctx.status(200);
+        } else {
+            ctx.result("Your account could not be created");
+            ctx.status(403);
+        }
+    }
+
 
     public void handleGetUserById(Context ctx){
         User u = userService.getUserById(parseInt(ctx.pathParam("id")));
Index: app/src/main/java/com/revature/models/Reimbursement.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.revature.models;\r\n\r\nimport java.sql.Timestamp;\r\n\r\npublic class Reimbursement {\r\n    Integer id;\r\n    double amount;\r\n    ReimbursementType reimbursementType;\r\n    ReimbursementStatus reimbursementStatus;\r\n    Timestamp time_submitted;\r\n    Timestamp time_resolved;\r\n    User author;\r\n    User resolver;\r\n    String description;\r\n\r\n    public Reimbursement(double amount, ReimbursementType reimbursementType, User author) {\r\n        this.amount = amount;\r\n        this.reimbursementType = reimbursementType;\r\n        this.author = author;\r\n    }\r\n\r\n    public Reimbursement() {\r\n    }\r\n\r\n    public Reimbursement(int id, double amount, ReimbursementType reimbursementType, ReimbursementStatus reimbursementStatus, User author, User resolver, String description) {\r\n        this.id = id;\r\n        this.amount = amount;\r\n        this.reimbursementType = reimbursementType;\r\n        this.reimbursementStatus = reimbursementStatus;\r\n        this.author = author;\r\n        this.resolver = resolver;\r\n        this.description = description;\r\n    }\r\n\r\n    public Timestamp getTime_submitted() {\r\n        return time_submitted;\r\n    }\r\n\r\n    public void setTime_submitted(Timestamp time_submitted) {\r\n        this.time_submitted = time_submitted;\r\n    }\r\n\r\n    public Timestamp getTime_resolved() {\r\n        return time_resolved;\r\n    }\r\n\r\n    public void setTime_resolved(Timestamp time_resolved) {\r\n        this.time_resolved = time_resolved;\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(Integer id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public double getAmount() {\r\n        return amount;\r\n    }\r\n\r\n    public void setAmount(double amount) {\r\n        this.amount = amount;\r\n    }\r\n\r\n    public ReimbursementType getReimbursementType() {\r\n        return reimbursementType;\r\n    }\r\n\r\n    public void setReimbursementType(ReimbursementType reimbursementType) {\r\n        this.reimbursementType = reimbursementType;\r\n    }\r\n\r\n    public ReimbursementStatus getReimbursementStatus() {\r\n        return reimbursementStatus;\r\n    }\r\n\r\n    public void setReimbursementStatus(ReimbursementStatus reimbursementStatus) {\r\n        this.reimbursementStatus = reimbursementStatus;\r\n    }\r\n\r\n    public User getAuthor() {\r\n        return author;\r\n    }\r\n\r\n    public void setAuthor(User author) {\r\n        this.author = author;\r\n    }\r\n\r\n    public User getResolver() {\r\n        return resolver;\r\n    }\r\n\r\n    public void setResolver(User resolver) {\r\n        this.resolver = resolver;\r\n    }\r\n\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Reimbursement{\" +\r\n                \"id=\" + id +\r\n                \", amount=\" + amount +\r\n                \", reimbursementType=\" + reimbursementType +\r\n                \", reimbursementStatus=\" + reimbursementStatus +\r\n                \", author=\" + author +\r\n                \", resolver=\" + resolver +\r\n                \", description='\" + description + '\\'' +\r\n                '}';\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/revature/models/Reimbursement.java b/app/src/main/java/com/revature/models/Reimbursement.java
--- a/app/src/main/java/com/revature/models/Reimbursement.java	(revision 25fcffca50884329b8e7252c6aceb424a9d7b694)
+++ b/app/src/main/java/com/revature/models/Reimbursement.java	(date 1644612539708)
@@ -13,7 +13,7 @@
     User resolver;
     String description;
 
-    public Reimbursement(double amount, ReimbursementType reimbursementType, User author) {
+    public Reimbursement(double amount, ReimbursementType reimbursementType, ReimbursementStatus pending, User author) {
         this.amount = amount;
         this.reimbursementType = reimbursementType;
         this.author = author;
@@ -32,6 +32,14 @@
         this.description = description;
     }
 
+    public Reimbursement(double amount, int author_id, ReimbursementType reimbursementType) {
+        this.id = id;
+        User user = new User();
+        user.setId(author_id);
+        this.author = user;
+        this.reimbursementType = reimbursementType;
+    }
+
     public Timestamp getTime_submitted() {
         return time_submitted;
     }
